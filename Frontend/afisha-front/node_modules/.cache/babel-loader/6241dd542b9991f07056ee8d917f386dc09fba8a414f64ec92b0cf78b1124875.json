{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Varvara\\\\Afisha\\\\Frontend\\\\afisha-front\\\\src\\\\EnterPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom'; // Импортируем useHistory\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EnterPageRegister = () => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  const history = useHistory(); // Используем useHistory для навигации\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:7005/api/enter_page/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password,\n          email\n        })\n      });\n      if (response.status === 400) {\n        // Исправлено на \"===\"\n        const errorData = await response.json();\n        throw new Error('Должны быть заполнены все поля');\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Ошибка сервера');\n      }\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error('Error during fetch:', error);\n    }\n  };\n\n  // Функция для перехода на страницу авторизации\n  const handleSignIn = () => {\n    history.push('/authorization'); // Замените на ваш путь к странице авторизации\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Username\",\n      onChange: e => setUsername(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Password\",\n      onChange: e => setPassword(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      placeholder: \"Email\",\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"EnterPageRegister\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSignIn,\n      children: \"Sign in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(EnterPageRegister, \"GnBQVBFppZWJVHbL4ruwAug/r2s=\", false, function () {\n  return [useHistory];\n});\n_c = EnterPageRegister;\nexport default EnterPageRegister;\nvar _c;\n$RefreshReg$(_c, \"EnterPageRegister\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","EnterPageRegister","_s","username","setUsername","password","setPassword","email","setEmail","history","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","status","errorData","json","Error","ok","message","data","console","log","error","handleSignIn","push","onSubmit","children","type","placeholder","onChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Varvara/Afisha/Frontend/afisha-front/src/EnterPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'; // Импортируем useHistory\r\n\r\nconst EnterPageRegister = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const history = useHistory(); // Используем useHistory для навигации\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const response = await fetch('http://localhost:7005/api/enter_page/register', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ username, password, email }),\r\n            });\r\n\r\n            if (response.status === 400) { // Исправлено на \"===\"\r\n                const errorData = await response.json();\r\n                throw new Error('Должны быть заполнены все поля');\r\n            }\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message || 'Ошибка сервера');\r\n            }\r\n\r\n            const data = await response.json();\r\n            console.log(data);\r\n\r\n        } catch (error) {\r\n            console.error('Error during fetch:', error);\r\n        }\r\n    };\r\n\r\n    // Функция для перехода на страницу авторизации\r\n    const handleSignIn = () => {\r\n        history.push('/authorization'); // Замените на ваш путь к странице авторизации\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Username\" onChange={(e) => setUsername(e.target.value)} />\r\n            <input type=\"password\" placeholder=\"Password\" onChange={(e) => setPassword(e.target.value)} />\r\n            <input type=\"email\" placeholder=\"Email\" onChange={(e) => setEmail(e.target.value)} />\r\n            <button type=\"submit\">EnterPageRegister</button>\r\n            <button type=\"button\" onClick={handleSignIn}>Sign in</button> {/* Изменен тип на \"button\" и добавлен onClick */}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default EnterPageRegister;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}